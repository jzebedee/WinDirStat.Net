<Window x:Class="WinDirStat.Net.Wpf.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WinDirStat.Net.Wpf.Controls"
        xmlns:conv="clr-namespace:WinDirStat.Net.Wpf.Converters"
        xmlns:file="clr-namespace:WinDirStat.Net.Wpf.Controls.FileList"
        xmlns:sort="clr-namespace:WinDirStat.Net.Wpf.Controls.SortList"
        xmlns:cmd="clr-namespace:WinDirStat.Net.Wpf.Commands"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:ff="clr-namespace:WinDirStat.Net.Wpf.Behaviors"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        mc:Ignorable="d"
        DataContext="{Binding Main, Source={StaticResource Locator}}"
        Title="{Binding Title}" Height="450" Width="800" SnapsToDevicePixels="True" UseLayoutRounding="True" Background="#FFF0F0F0"
        Loaded="OnLoaded"
        Icon="Resources/App.ico"
        cmd:RelayInfo.Collection="{StaticResource MainCommands}">
  <Window.Resources>
    <ResourceDictionary>
      <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
      <DataTemplate x:Key="FileTreeNodeViewTemplate">
        <file:FileTreeNodeView />
      </DataTemplate>
      <DataTemplate x:Key="SubtreePercentageTemplate">
        <local:SubtreePercentage Percentage="{Binding Percent}"/>
      </DataTemplate>
      <DataTemplate x:Key="FilePercentTemplate">
        <TextBlock TextAlignment="Right">
          <TextBlock.Style>
            <Style TargetType="{x:Type TextBlock}">
              <Setter Property="Text" Value="{Binding Percent, StringFormat=P1}"/>
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsRoot}" Value="True">
                  <Setter Property="Text" Value="{Binding DataContext.ScanTime, Converter={conv:ScanTimeFormatter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </TextBlock.Style>
        </TextBlock>
      </DataTemplate>
      <DataTemplate x:Key="AttributesTemplate">
        <TextBlock Text="{Binding AttributesString}" ToolTip="{Binding Attributes}"/>
      </DataTemplate>
      <DataTemplate x:Key="IconExtensionTemplate">
        <StackPanel Orientation="Horizontal">
          <Image Source="{Binding Icon}" Width="16" Height="16" Margin="0,0,5,1" VerticalAlignment="Center" Focusable="False"/>
          <TextBlock Text="{Binding Extension}" Margin="2,0,6,0" VerticalAlignment="Center" Focusable="False" TextTrimming="CharacterEllipsis" />
        </StackPanel>
      </DataTemplate>
      <DataTemplate x:Key="ExtensionPreviewTemplate">
        <Image Source="{Binding Preview}" Stretch="Fill" VerticalAlignment="Center" Height="13"/>
      </DataTemplate>

      <SolidColorBrush x:Key="ToolBarHorizontalBackground" Color="#FFEEF5FD"/>
      <SolidColorBrush x:Key="ToolBarToggleButtonVerticalBackground" Color="#FFEEF5FD"/>
      <SolidColorBrush x:Key="ToolBarButtonHover" Color="#210080FF"/>
      <SolidColorBrush x:Key="ToolBarGripper" Color="#FF6D6D6D"/>
      <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,0,3,3" Background="{TemplateBinding Background}">
                <Canvas Width="7" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="2,7,2,2" Height="6" HorizontalAlignment="Right">
                  <Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>
                  <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>
                  <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>
                  <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>
                </Canvas>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
          </DataTrigger>
        </Style.Triggers>
      </Style>
      <SolidColorBrush x:Key="ToolBarVerticalBackground" Color="#FFEEF5FD"/>
      <SolidColorBrush x:Key="ToolBarToggleButtonHorizontalBackground" Color="#FFEEF5FD"/>
      <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,3,3,0" Background="{TemplateBinding Background}">
                <Canvas Width="6" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="7,2,2,2" Height="7" HorizontalAlignment="Right">
                  <Path Data="M 1 1.5 L 6 1.5" Stroke="White"/>
                  <Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>
                  <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White"/>
                  <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>
                </Canvas>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
          </DataTrigger>
        </Style.Triggers>
      </Style>
      <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#FFB6BDC5"/>
      <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FFEEF5FD"/>
      <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
                <Rectangle>
                  <Rectangle.Fill>
                    <DrawingBrush ViewboxUnits="Absolute" ViewportUnits="Absolute" Viewport="0,0,4,4" Viewbox="0,0,4,4" TileMode="Tile">
                      <DrawingBrush.Drawing>
                        <DrawingGroup>
                          <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>
                          <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>
                        </DrawingGroup>
                      </DrawingBrush.Drawing>
                    </DrawingBrush>
                  </Rectangle.Fill>
                </Rectangle>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter Property="Cursor" Value="SizeAll"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="0,0,11,0"/>
        <Setter Property="CornerRadius" Value="3,3,3,3"/>
        <Style.Triggers>
          <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
            <Setter Property="CornerRadius" Value="0,0,0,0"/>
          </DataTrigger>
        </Style.Triggers>
      </Style>
      <SolidColorBrush x:Key="ToolBarButtonHoverBorder" Color="#802683E0"/>
      <SolidColorBrush x:Key="ToolBarButtonPressedBorder" Color="#90006CD9"/>
      <SolidColorBrush x:Key="ToolBarButtonPressed" Color="#400080FF"/>
      <Style x:Key="MyToolBarButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Padding" Value="2,1,3,1"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                  <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToolBarButtonHoverBorder}"/>
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                  <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToolBarButtonHoverBorder}"/>
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                  <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ToolBarButtonPressedBorder}"/>
                  <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonPressed}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="{x:Type ToolBar}">
        <Style.Resources>
          <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource MyToolBarButtonStyle}"/>
          <Style TargetType="{x:Type local:ImageButton}" BasedOn="{StaticResource MyToolBarButtonStyle}"/>
          <Style TargetType="{x:Type local:CommandButton}" BasedOn="{StaticResource MyToolBarButtonStyle}"/>
        </Style.Resources>
        <Setter Property="Background" Value="#FFF0F0F0"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToolBar}">
              <Grid x:Name="Grid" Margin="0" SnapsToDevicePixels="true">
                <Grid x:Name="OverflowGrid" HorizontalAlignment="Right">
                  <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" Background="#FFFAFAFA"/>
                  <Popup x:Name="OverflowPopup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" StaysOpen="false">
                    <Themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">
                      <Border x:Name="ToolBarSubMenuBorder" BorderBrush="{StaticResource ToolBarMenuBorder}" BorderThickness="1" Background="#FFF0F0F0" RenderOptions.ClearTypeHint="Enabled">
                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" KeyboardNavigation.DirectionalNavigation="Cycle" FocusVisualStyle="{x:Null}" Focusable="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" WrapWidth="200"/>
                      </Border>
                    </Themes:SystemDropShadowChrome>
                  </Popup>
                </Grid>
                <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}" CornerRadius="0">
                  <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                    <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>
                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                    <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Height="Auto"/>
                  </DockPanel>
                </Border>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsOverflowOpen" Value="true">
                  <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>
                </Trigger>
                <Trigger Property="Header" Value="{x:Null}">
                  <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="ToolBarTray.IsLocked" Value="true">
                  <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="OverflowPopup" Value="true">
                  <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                  <Setter Property="SnapsToDevicePixels" TargetName="Shdw" Value="true"/>
                  <Setter Property="Color" TargetName="Shdw" Value="#71000000"/>
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                  <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>
                  <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>
                  <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>
                  <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>
                  <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>
                  <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>
                  <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>
                  <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>
                  <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>
                  <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>
                  <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>
                  <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>
                  <Setter Property="Placement" TargetName="OverflowPopup" Value="Right"/>
                  <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>
                  <Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
          </DataTrigger>
        </Style.Triggers>
      </Style>


      <ContextMenu x:Key="FileContextMenu" DataContext="{Binding Main, Source={StaticResource Locator}}">
        <local:CommandMenuItem Command="{Binding Expand}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding OpenItem}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding CopyPath}"/>
        <local:CommandMenuItem Command="{Binding Explore}"/>
        <local:CommandMenuItem Command="{Binding CommandPrompt}"/>
        <local:CommandMenuItem Command="{Binding PowerShell}"/>
        <local:CommandMenuItem Command="{Binding RefreshSelected}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding DeleteRecycle}"/>
        <local:CommandMenuItem Command="{Binding DeletePermanently}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding Properties}"/>
      </ContextMenu>
    </ResourceDictionary>
  </Window.Resources>
  <i:Interaction.Triggers>
    <i:EventTrigger EventName="Closing">
      <i:CallMethodAction TargetObject="{Binding}" MethodName="Dispose"/>
    </i:EventTrigger>
    <i:EventTrigger EventName="ContentRendered">
      <i:CallMethodAction TargetObject="{Binding}" MethodName="WindowShown"/>
    </i:EventTrigger>
  </i:Interaction.Triggers>
  <DockPanel>
    <Menu DockPanel.Dock="Top" IsMainMenu="True">
      <MenuItem Header="File">
        <local:CommandMenuItem Command="{Binding Open}"/>
        <local:CommandMenuItem Command="{Binding Save}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding Reload}"/>
        <local:CommandMenuItem Command="{Binding Close}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding Elevate}" Visibility="{Binding HideElevateCommand, Converter={conv:CollapsedWhenTrue}}"/>
        <Separator Visibility="{Binding HideElevateCommand, Converter={conv:CollapsedWhenTrue}}"/>
        <local:CommandMenuItem Command="{Binding Exit}"/>
      </MenuItem>
      <MenuItem Header="Edit">
        <i:Interaction.Triggers>
          <i:EventTrigger EventName="SubmenuOpened">
            <i:CallMethodAction TargetObject="{Binding}" MethodName="UpdateEmptyRecycleBin"/>
          </i:EventTrigger>
        </i:Interaction.Triggers>
        <local:CommandMenuItem Command="{Binding CopyPath}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding DeleteRecycle}"/>
        <local:CommandMenuItem Command="{Binding DeletePermanently}"/>
        <Separator/>
        <local:CommandMenuItem Header="{Binding EmptyRecycleBinLabel}" Command="{Binding EmptyRecycleBin}"/>
      </MenuItem>
      <MenuItem Header="Treemap">
        <Separator/>
      </MenuItem>
      <MenuItem Header="Options">
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowFreeSpace}" Command="{Binding ShowFreeSpace}"/>
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowUnknown}" Command="{Binding ShowUnknown}"/>
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowTotalSpace}" Command="{Binding ShowTotalSpace}"/>
        <Separator/>
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowFileTypes}" Command="{Binding ShowFileTypes}"/>
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowTreemap}" Command="{Binding ShowTreemap}"/>
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowToolBar}" Command="{Binding ShowToolBar}"/>
        <local:CommandMenuItem IsChecked="{Binding Settings.ShowStatusBar}" Command="{Binding ShowStatusBar}"/>
        <Separator/>
        <local:CommandMenuItem Command="{Binding Configure}" />
        <!--
        <local:ImageMenuItem Header="Show Free Space" IsCheckable="True" IsChecked="{Binding Settings.ShowFreeSpace}" Source="Resources/FileIcons/FreeSpace.png"/>
        <local:ImageMenuItem Header="Show Unknown" IsCheckable="True" IsChecked="{Binding Settings.ShowUnknown}" Source="Resources/FileIcons/UnknownSpace.png"/>
        <Separator/>
        <local:ImageMenuItem Header="Show File Types" IsCheckable="True" IsChecked="{Binding Settings.ShowFileTypes}"/>
        <local:ImageMenuItem Header="Show Treemap" IsCheckable="True" IsChecked="{Binding Settings.ShowTreemap}"/>
        <local:ImageMenuItem Header="Show Toolbar" IsCheckable="True" IsChecked="{Binding Settings.ShowToolBar}"/>
        <local:ImageMenuItem Header="Show Statusbar" IsCheckable="True" IsChecked="{Binding Settings.ShowStatusBar}"/>
        <Separator/>
        <local:ImageMenuItem Header="Configure WinDirStat..." Source="Resources/Icons/Settings.png" Command="{Binding Configure}" />
        -->
      </MenuItem>
    </Menu>
    <ToolBarTray DockPanel.Dock="Top" Background="{x:Null}" Visibility="{Binding Settings.ShowToolBar, Converter={conv:CollapsedWhenFalse}}">
      <ToolBar x:Name="toolBar" Background="#FFF0F0F0" Height="24">
        <local:CommandButton Command="{Binding Open}"/>
        <local:CommandButton Command="{Binding Save}"/>
        <local:CommandButton Command="{Binding Reload}"/>
        <Separator/>
        <local:CommandButton Command="{Binding OpenItem}"/>
        <local:CommandButton Command="{Binding CopyPath}"/>
        <local:CommandButton Command="{Binding Explore}"/>
        <local:CommandButton Command="{Binding CommandPrompt}"/>
        <local:CommandButton Command="{Binding PowerShell}"/>
        <local:CommandButton Command="{Binding RefreshSelected}"/>
        <Separator/>
        <local:CommandButton Command="{Binding DeleteRecycle}"/>
        <local:CommandButton Command="{Binding DeletePermanently}"/>
        <Separator/>
        <local:CommandButton Command="{Binding Properties}"/>
      </ToolBar>
    </ToolBarTray>

    <StatusBar x:Name="statusBar" DockPanel.Dock="Bottom" Visibility="{Binding Settings.ShowStatusBar, Converter={conv:CollapsedWhenFalse}}">
      <StatusBar.ItemsPanel>
        <ItemsPanelTemplate>
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
          </Grid>
        </ItemsPanelTemplate>
      </StatusBar.ItemsPanel>
      <StatusBarItem x:Name="statusSuspend" DockPanel.Dock="Left"  Grid.Column="0" Padding="1" HorizontalContentAlignment="Stretch" Visibility="{Binding IsScanning, Converter={conv:CollapsedWhenFalse}}">
        <DockPanel>
          <Button x:Name="buttonCancel" DockPanel.Dock="Left" Padding="0" Width="80" Focusable="False" IsTabStop="False" Margin="0,0,5,0" Command="{Binding Cancel}">
            <TextBlock Text="Cancel" Margin="0,-2,0,0"/>
          </Button>
          <ToggleButton x:Name="buttonSuspend" DockPanel.Dock="Left" Padding="0" Width="80" IsChecked="{Binding IsScanSuspended}" Focusable="False" IsTabStop="False" Margin="0,0,5,0">
            <TextBlock Text="Suspend" Margin="0,-2,0,0"/>
          </ToggleButton>
          <ProgressBar x:Name="progressBar" Value="{Binding ScanProgress, Mode=OneWay}" Maximum="1" HorizontalContentAlignment="Stretch"/>
        </DockPanel>
      </StatusBarItem>
      <StatusBarItem x:Name="statusText" Grid.Column="0" Visibility="{Binding IsScanning, Converter={conv:CollapsedWhenTrue}}">
        <TextBlock x:Name="textBlockStatus" TextTrimming="CharacterEllipsis">
          <TextBlock.Style>
            <Style TargetType="{x:Type TextBlock}">
              <Setter Property="Text" Value="Ready"/>
              <Style.Triggers>
                <DataTrigger Binding="{Binding HasHover, ElementName=graphView}" Value="True">
                  <Setter Property="Text" Value="{Binding Hover.FullName, ElementName=graphView}"/>
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </TextBlock.Style>
        </TextBlock>
      </StatusBarItem>
      <Separator Width="1"  DockPanel.Dock="Right" Grid.Column="1" HorizontalAlignment="Center" Background="#FFD7D7D7" Margin="2,0,2,-3"/>
      <StatusBarItem  DockPanel.Dock="Right" Grid.Column="2" x:Name="statusRAMUsage"  HorizontalAlignment="Right" Margin="0,0,8,0" Padding="1">
        <TextBlock><Run Text="RAM Usage:   "/><Run Text=" "/><Run Text="{Binding GCRAMUsage, Converter={conv:ByteFormatter}, Mode=OneWay}"/></TextBlock>
      </StatusBarItem>
    </StatusBar>

    <Grid>
      <Grid.RowDefinitions>
        <RowDefinition Height="3*"/>
        <local:VisibleRowDefinition Height="5"
                                    Visible="{Binding HideTreemap, Converter={conv:InverseBoolean}}"/>
        <local:VisibleRowDefinition Height="2*" MinHeight="1"
                                    Visible="{Binding HideTreemap, Converter={conv:InverseBoolean}}"/>
      </Grid.RowDefinitions>
      <Grid Grid.Row="0">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="5*"/>
          <local:VisibleColumnDefinition Width="5"
                                         Visible="{Binding HideFileTypes, Converter={conv:InverseBoolean}}"/>
          <local:VisibleColumnDefinition Width="2*" MinWidth="1"
                                         Visible="{Binding HideFileTypes, Converter={conv:InverseBoolean}}"/>
        </Grid.ColumnDefinitions>
        <file:FileTreeView x:Name="tree" Grid.Column="0" Root="{Binding RootItem}"
                                 ff:MultiSelectorBehaviors.SynchronizedSelectedItems="{Binding SelectedFiles}"
                                 SortMode="{Binding FileComparer.Mode}" SortDirection="{Binding FileComparer.Direction}"
                                 SelectionChanged="OnFileSelectionChanged" GotFocus="OnFileTreeGotFocus">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="Sort">
              <i:CallMethodAction TargetObject="{Binding}" MethodName="SortFiles"/>
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <file:FileTreeView.ItemContainerStyle>
            <Style TargetType="{x:Type file:FileTreeViewItem}">
              <Setter Property="ContextMenu" Value="{StaticResource FileContextMenu}"/>
            </Style>
          </file:FileTreeView.ItemContainerStyle>
          <file:FileTreeView.View>
            <file:FileGridView>
              <sort:SortViewColumn Width="250" Header="Name"
                                               SortMode="Name"
                                               CellDataTemplate="{StaticResource FileTreeNodeViewTemplate}"/>
              <sort:SortViewColumn Width="120" Header="Subtree Percentage"
                                               SortMode="Subtree" DefaultSortDirection="Descending"
                                               CellDataTemplate="{StaticResource SubtreePercentageTemplate}"/>
              <sort:SortViewColumn Width="62" Header="Percent" TextAlignment="Right"
                                              SortMode="Percent" DefaultSortDirection="Descending"
                                              CellDataTemplate="{StaticResource FilePercentTemplate}"/>
              <sort:SortViewColumn Width="70" Header="Size" TextAlignment="Right"
                                              SortMode="Size" DefaultSortDirection="Descending"
                                              CellBinding="{Binding Size, Converter={conv:ByteFormatter}}"/>
              <sort:SortViewColumn Width="80" Header="Items" TextAlignment="Right"
                                              SortMode="Items" DefaultSortDirection="Descending"
                                              CellBinding="{Binding ItemCount, Converter={conv:ItemCountFormatter}}"/>
              <sort:SortViewColumn Width="80" Header="Files" TextAlignment="Right"
                                              SortMode="Files" DefaultSortDirection="Descending"
                                              CellBinding="{Binding FileCount, Converter={conv:ItemCountFormatter}}"/>
              <sort:SortViewColumn Width="75" Header="Subdirs" TextAlignment="Right"
                                              SortMode="Subdirs" DefaultSortDirection="Descending"
                                              CellBinding="{Binding SubdirCount, Converter={conv:ItemCountFormatter}}"/>
              <sort:SortViewColumn Width="110" Header="Last Change"
                                               SortMode="LastWrite" DefaultSortDirection="Descending"
                                               CellBinding="{Binding LastWriteTime, Converter={conv:FileTimeFormatter}}"/>
              <sort:SortViewColumn Width="50" Header="Attributes"
                                              SortMode="Attributes"
                                              CellDataTemplate="{StaticResource AttributesTemplate}"/>
            </file:FileGridView>
          </file:FileTreeView.View>
        </file:FileTreeView>
        <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" ResizeDirection="Columns" Focusable="False"/>
        <sort:SortListView x:Name="extensionList" Grid.Column="2"
                                   SortMode="{Binding ExtensionComparer.Mode}" SortDirection="{Binding ExtensionComparer.Direction}"
                                   SelectedItem="{Binding SelectedExtension}"
                                   ItemsSource="{Binding Extensions}" SelectionChanged="OnExtensionSelectionChanged" SelectionMode="Single" GotFocus="OnExtensionListGotFocus">
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="Sort">
              <i:CallMethodAction TargetObject="{Binding}" MethodName="SortExtensions"/>
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <sort:SortListView.View>
            <sort:SortView x:Name="extensionsGridView">
              <sort:SortViewColumn Width="86" Header="Extension"
                                                 SortMode="Extension"
                                                 CellDataTemplate="{StaticResource IconExtensionTemplate}"/>
              <sort:SortViewColumn Width="50" Header="Color"
                                                 SortMode="Color"
                                                 CellDataTemplate="{StaticResource ExtensionPreviewTemplate}"/>
              <sort:SortViewColumn Width="105" Header="Description"
                                                  SortMode="Description"
                                                  CellBinding="{Binding TypeName}"/>
              <sort:SortViewColumn Width="64" Header="Bytes" TextAlignment="Right"
                                                  SortMode="Bytes" DefaultSortDirection="Descending"
                                                  CellBinding="{Binding Size, Converter={conv:ByteFormatter}}"/>
              <sort:SortViewColumn Width="60" Header="% Bytes" TextAlignment="Right"
                                                  SortMode="Percent" DefaultSortDirection="Descending"
                                                  CellBinding="{Binding Percent, StringFormat=P1}"/>
              <sort:SortViewColumn Width="60" Header="Files" TextAlignment="Right"
                                                  SortMode="Files" DefaultSortDirection="Descending"
                                                  CellBinding="{Binding FileCount, Converter={conv:ItemCountFormatter}}"/>
            </sort:SortView>
          </sort:SortListView.View>
        </sort:SortListView>
      </Grid>
      <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" ResizeDirection="Rows" Focusable="False"/>
      <Border Grid.Row="2" BorderThickness="1" BorderBrush="{StaticResource ListBorder}">
        <local:GraphView x:Name="graphView"
                         IsEnabled="{Binding GraphViewEnabled}"
                         Root="{Binding GraphViewRootItem}"
                         RenderPriority="{Binding Settings.RenderPriority}"
                         MouseDown="OnGraphFileSelected"/>
      </Border>
    </Grid>
  </DockPanel>
</Window>
